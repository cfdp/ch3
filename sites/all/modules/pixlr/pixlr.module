<?php

/*
  By Benjamin Christensen
  Handles pixlr image import to Cyberhus .
*/
function pixlr_menu() {
  // This is the minimum information you can provide for a menu item.
  $items['pixlr/hentbillede'] = array(
    'title' => 'Henter dit billede...',
    'page callback' => 'getPixlrImage',
    'access arguments' => array('access content'),
	'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/*fetch the picture from pixlr*/
function getPixlrImage() {
	//Parse the query parameters
	$image = $_GET['image'];
	$type = $_GET['type'];
	$state = $_GET['state'];
	$imagename = $_GET['title'];
	
	
	//Verify that the file is an image
	$headers = get_headers($image, 1);
	$content_type = explode("/", $headers['Content-Type']);
	if ($content_type[0] != "image"){
	//Handle the error
		drupal_set_message(t("Sorry, an error has ocurred. Invalid file type."), 'error') ;
	exit;
	}
	
	//Optional: set a unique filename if the file is saved to a public service and inserted into a database//$filename = uniqid();
	$filename = uniqid("tegnselv_");
	//Set the local file path where the image will be copied to
	$save_path = file_directory_path();
	$save_path = $save_path . "/cyberhusdk/billeder/billedgalleri/tegnselv/". $filename ."." .$type;
		
	//Copy the images to the local server as set before.
	copy($image,$save_path);
	
	//resizing the image if necessary - max 1000 px width is allowed
	$image_resized = new SimpleImage();
	$image_resized->load($save_path);
	if ($image_resized->getWidth() > 1000) {
		$image_resized->resizeToWidth(1000);
	}
	
	$image_resized->save($save_path);
	
	// opret node i Drupal som billedet skal knyttes til
	makeNewImageNode($imagename, $save_path);
}

/*we make a new node and save it directly to the Drupal database*/
function makeNewImageNode($image_title,$path) {
	global $user;
	// Create a new node.
	$node = new stdClass();
	$node->type = "image";
	$node->uid = $user->uid;
	$node->status = "1";
	$node->created = time();
    $node->changed = time();
	$node->comment = "2";
	$node->language = "da";
	$node->promote = "0";
	$node->moderate = "0";
	$node->sticky = "0";
	$node->tnid = "0";
	$node->translate = "0";
	$node->revision_uid = $node->uid;
	$node->title = $image_title;
    $node->body = "";  
    $node->teaser = "";
	$node->log = "";
	$node->revision_timestamp = $node->changed;
    $node->format = "1";
    $node->name = "";
	$node->picture = "";
	//$node->data = ??;
	$node->field_billede[] = util_import_image($path);
	$node->og_groups_both = array();
	$node->og_groups = array();
	$node->last_comment_timestamp= $node->created;
	$node->last_comment_name = "";
	$node->comment_count = 0;
	$node->taxonomy = array();
	$node->locations = array();
	$node->location = array();
	$node->nodewords = array();
	$node->page_title = "";

	// Save the node.
	node_save($node);
	$node_id = $node->nid;
	drupal_set_message(t("Your image has been saved."), 'status'); 
	drupal_goto("node/".$node_id);
	
}



/**
 * Import an image to the local server.
 *
 * @param $file_path The FULL PATH to the original file, e.g. /foo/bar/my_image.jpg
 */
function util_import_image($file_path) {
  global $user;
 
  // Make sure the existing image exists and is readable.
  if (!is_readable($file_path)) {
    watchdog('cma_import', 'Beklager - billedet kan ikke indlÃ¦ses: %file', array('%file' => check_plain($file_path)));
  }
 
  // Original filename (without the path)
  $filename = basename($file_path);
 
  // Modify this if you want to save somewhere other than sites/default/files
  $dest = file_directory_path()."/cyberhusdk/billeder/billedgalleri/tegnselv";
 
  // Create a new object for image metadata
  $asset = new stdClass();
  $asset->filename = $filename;
 
  // Copy the file and, if successful, create the metadata object.
  if (file_copy($file_path, $dest, FILE_EXISTS_REPLACE)) {
    $asset->uid = $user->uid;
    $asset->filepath = $dest . '/' . $asset->filename;
    $asset->filemime = file_get_mimetype($asset->filename);
    $asset->timestamp = time();
    $asset->status = 1;
	//$asset->list = 1;
	$asset->data = array("alt" => "", "title" => "");
    drupal_write_record('files', $asset);
  }
 
  // Only return an asset if it saved correctly. We return
  // an array because that is what CCK uses.
  return isset($asset->fid) ? (array)$asset : NULL;
}

/*Alternativt, simplere script til skalering*/
/*
* File: SimpleImage.php
* Author: Simon Jarvis
* Copyright: 2006 Simon Jarvis
* Date: 08/11/06
* Link: http://www.white-hat-web-design.co.uk/articles/php-image-resizing.php
* 
* This program is free software; you can redistribute it and/or 
* modify it under the terms of the GNU General Public License 
* as published by the Free Software Foundation; either version 2 
* of the License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful, 
* but WITHOUT ANY WARRANTY; without even the implied warranty of 
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
* GNU General Public License for more details: 
* http://www.gnu.org/licenses/gpl.html
*
*/
 
class SimpleImage {
   
   var $image;
   var $image_type;
 
   function load($filename) {
      $image_info = getimagesize($filename);
      $this->image_type = $image_info[2];
      if( $this->image_type == IMAGETYPE_JPEG ) {
         $this->image = imagecreatefromjpeg($filename);
      } elseif( $this->image_type == IMAGETYPE_GIF ) {
         $this->image = imagecreatefromgif($filename);
      } elseif( $this->image_type == IMAGETYPE_PNG ) {
         $this->image = imagecreatefrompng($filename);
      }
   }
   
   function save($filename, $image_type=IMAGETYPE_JPEG, $compression=100, $permissions=null) {
      if( $image_type == IMAGETYPE_JPEG ) {
         imagejpeg($this->image,$filename,$compression);
      } elseif( $image_type == IMAGETYPE_GIF ) {
         imagegif($this->image,$filename);         
      } elseif( $image_type == IMAGETYPE_PNG ) {
         imagepng($this->image,$filename);
      }   
      if( $permissions != null) {
         chmod($filename,$permissions);
      }
   }
   
   function output($image_type=IMAGETYPE_JPEG) {
      if( $image_type == IMAGETYPE_JPEG ) {
         imagejpeg($this->image);
      } elseif( $image_type == IMAGETYPE_GIF ) {
         imagegif($this->image);         
      } elseif( $image_type == IMAGETYPE_PNG ) {
         imagepng($this->image);
      }   
   }
   
   function getWidth() {
      return imagesx($this->image);
   }
   function getHeight() {
      return imagesy($this->image);
   }
   function resizeToHeight($height) {
      $ratio = $height / $this->getHeight();
      $width = $this->getWidth() * $ratio;
      $this->resize($width,$height);
   }
   function resizeToWidth($width) {
      $ratio = $width / $this->getWidth();
      $height = $this->getheight() * $ratio;
      $this->resize($width,$height);
   }
   function scale($scale) {
      $width = $this->getWidth() * $scale/100;
      $height = $this->getheight() * $scale/100; 
      $this->resize($width,$height);
   }
   function resize($width,$height) {
      $new_image = imagecreatetruecolor($width, $height);
      imagecopyresampled($new_image, $this->image, 0, 0, 0, 0, $width, $height, $this->getWidth(), $this->getHeight());
      $this->image = $new_image;   
   }      
}
