<?php
/**
 * @file
 * Allows online editing of images using different image editing services.
 */

/**
 * Implements hook_hook_info().
 */
function imageeditor_hook_info() {
  $hooks = array(
    'imageeditor_editors',
    'imageeditor_editors_alter',
    'imageeditor_uploaders',
    'imageeditor_uploaders_alter',
    'imageeditor_api_keys',
    'imageeditor_api_keys_alter',
    'imageeditor_overlays',
    'imageeditor_overlays_alter',
  );

  return array_fill_keys($hooks, array('group' => 'imageeditor'));
}

/**
 * Implements hook_permission().
 */
function imageeditor_permission() {
  return array(
    'use imageeditor' => array(
      'title' => t('Use Image Editor'),
      'description' => t('Allows to use different image editors to create/edit images.')),
    'administer imageeditor' => array(
      'title' => t('Administer Image Editor'),
      'description' => t('Set up API keys for different image editors and upload services.'))
  );
}

/**
 * Implements hook_menu().
 */
function imageeditor_menu() {
  $items = array();
  $items['admin/config/media/imageeditor'] = array(
    'title' => 'Image editor',
    'description' => 'Configure Image Editor settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imageeditor_settings_form'),
    'access callback' => 'imageeditor_settings_access',
    'file' => 'imageeditor.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/media/imageeditor/imageeditor'] = array(
    'title' => 'Image editor',
    'description' => 'Configure Image Editor settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imageeditor_settings_form'),
    'access callback' => 'imageeditor_settings_access',
    'file' => 'imageeditor.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['imageeditor/ajax/save'] = array(
    'title' => 'Image Editor Save',
    'description' => 'Saving images from Image Editor',
    'page callback' => 'imageeditor_save',
    'access callback' => 'user_access',
    'access arguments' => array('use imageeditor'),
    'file' => 'imageeditor.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['imageeditor/ajax/close'] = array(
    'title' => 'Image Editor Exit',
    'description' => 'Exiting from Image Editor',
    'page callback' => 'imageeditor_close',
    'access callback' => 'user_access',
    'access arguments' => array('use imageeditor'),
    'file' => 'imageeditor.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['imageeditor/ajax/upload'] = array(
    'page callback' => 'imageeditor_upload',
    'access callback' => 'user_access',
    'access arguments' => array('use imageeditor'),
    'file' => 'imageeditor.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['imageeditor/webcam'] = array(
    'title' => 'Image Editor Webcam',
    'description' => 'Take an image from a Webcam',
    'page callback' => 'imageeditor_webcam',
    'access callback' => 'user_access',
    'access arguments' => array('use imageeditor'),
    'theme callback' => 'imageeditor_webcam_theme',
    'file' => 'imageeditor.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['imageeditor/scriptcam'] = array(
    'title' => 'Image Editor ScriptCam',
    'description' => 'Take an image from a Webcam',
    'page callback' => 'imageeditor_scriptcam',
    'access callback' => 'user_access',
    'access arguments' => array('use imageeditor'),
    'theme callback' => 'imageeditor_webcam_theme',
    'file' => 'imageeditor.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Access callback for admin settings page.
 */
function imageeditor_settings_access() {
  if (user_access('administer site configuration') || user_access('administer imageeditor')) {
    return TRUE;
  }
  return FALSE;
}

function imageeditor_webcam_theme() {
  return variable_get('admin_theme', 0);
}

/**
 * API function to initialize required editors and uploaders.
 */
function imageeditor_initialize($editors, $uploaders) {
  global $user;
  global $language;
  static $conf_added;
  $conf_array = array();

  if (empty($conf_added)) {
    $conf_added['imageeditor'] = FALSE;
    foreach (imageeditor_editors() as $codename => $editor) {
      $conf_added[$codename] = FALSE;
    }
    foreach (imageeditor_uploaders() as $codename => $uploader) {
      $conf_added[$codename] = FALSE;
    }
  }

  // Base settings.
  if (!$conf_added['imageeditor']) {
    $conf_added['imageeditor'] = TRUE;
    drupal_add_library('system', 'jquery.cookie');
    $path = drupal_get_path('module', 'imageeditor');
    drupal_add_js($path . '/js/imageeditor.js', array('scope' => 'footer', 'weight' => -10));
    drupal_add_css($path . '/css/imageeditor.css');
    drupal_add_css($path . '/css/imageeditor.widget.css');
    // Overlay settings.
    $overlays = imageeditor_overlays();
    $codename = variable_get('imageeditor_overlay_type', 'custom');
    if (array_key_exists($codename, $overlays) && function_exists($overlays[$codename]['initialize_callback'])) {
      $overlays[$codename]['initialize_callback']();
    }
  }

  // Editors settings.
  foreach (imageeditor_editors() as $codename => $editor) {
    if (!$conf_added[$codename] && array_key_exists($codename, $editors)) {
      $conf_added[$codename] = TRUE;
      // Editor initialize callback.
      if (array_key_exists('initialize_callback', $editor) && function_exists($editor['initialize_callback'])) {
        $editor['initialize_callback']($editor);
      }
      $conf_array[$codename]['html'] = theme('imageeditor_widget_item', array('name' => $editor['name'], 'class' => $editor['class']));
      foreach (array('name', 'launch_type', 'image_url_param', 'loading_url', 'image_creation', 'options') as $key) {
        if (array_key_exists($key, $editor)) {
          $conf_array[$codename][$key] = $editor[$key];
        }
      }
      // Editor language settings.
      if (array_key_exists('lang_map', $editor)) {
        if (property_exists($user, 'language') && !empty($user->language) && array_key_exists($user->language, $editor['lang_map'])) {
          $conf_array[$codename]['options'][$editor['lang_option']] = $editor['lang_map'][$user->language];
        }
        elseif (array_key_exists($language->language, $editor['lang_map'])) {
          $conf_array[$codename]['options'][$editor['lang_option']] = $editor['lang_map'][$language->language];
        }
        else {
          $conf_array[$codename]['options'][$editor['lang_option']] = $editor['lang_default'];
        }
      }
    }
  }

  // Uploaders settings.
  foreach (imageeditor_uploaders() as $codename => $uploader) {
    if (!$conf_added[$codename] && array_key_exists($codename, $uploaders)) {
      $conf_added[$codename] = TRUE;
      $conf_array[$codename] = array(
        'upload_url' => url('imageeditor/ajax/upload/' . $codename, array('absolute' => TRUE)),
        'html' => theme('imageeditor_widget_item', array('name' => $uploader['name'], 'class' => $uploader['class'])),
      );
    }
  }

  drupal_add_js(array('imageeditor' => $conf_array), 'setting');
}

/**
 * Implements hook_theme().
 */
function imageeditor_theme($existing, $type, $theme, $path) {
  return array(
    'imageeditor_widget_item' => array(
      'variables' => array('name' => NULL, 'class' => NULL),
    ),
    'imageeditor_settings_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Theme function to output Image Editor widget item.
 */
function theme_imageeditor_widget_item($variables) {
  return '<div class="' . $variables['class'] . '" title="' . $variables['name'] . '"></div>';
}

/**
 * Returns all available image editors.
 */
function imageeditor_editors() {
  return imageeditor_info('editors');
}

/**
 * Returns all available image uploaders.
 */
function imageeditor_uploaders() {
  return imageeditor_info('uploaders');
}

/**
 * Returns API keys for different services.
 */
function imageeditor_api_keys() {
  return imageeditor_info('api_keys');
}

/**
 * Returns different types of overlays.
 */
function imageeditor_overlays() {
  return imageeditor_info('overlays');
}

/**
 * Helper function to invoke hooks.
 * @param $type
 * Either editors, uploaders, api_keys or overlays.
 */
function imageeditor_info($type = 'editors') {
  static $info;
  if (!isset($info[$type])) {
    $info[$type] = array();
    module_load_include('inc', 'imageeditor', 'includes/' . $type);

    // Invoke hook_imageeditor_$type().
    foreach (module_invoke_all('imageeditor_' . $type) as $key => $value) {
      $info[$type][$key] = $value;
    }
    // Invoke hook_imageeditor_$type_alter().
    drupal_alter('imageeditor_' . $type, $info[$type]);
  }

  return $info[$type];
}

/**
 * Returns Image Editor temporary directory.
 */
function imageeditor_temporary_directory() {
  return file_default_scheme() . '://imageeditor/temp';
}
