var cimChatIntegration = {};

(function($, Drupal){
  var cimChats = {},
      cmSingleChatStatusListener,
      cmUpdatePositionInQueueListener,
      cmConfirmReadyEventListener; // Listeners for events from the CIM chat server


  /**
   * Load overriding functions
   */
  // Note: We will not get errors if the domain is wrong.
  // https://stackoverflow.com/questions/1406537/handling-errors-in-jquery-getscript
  cimChatIntegration.loadOverrides = function(scriptBase, callback) {
    $.getScript( scriptBase + "/sites/all/modules/custom/cim_chat/js/cim_chat_overrides.js" )
      .done(function( script, textStatus ) {
        callback(null);
      })
      .fail(function( jqxhr, settings, exception ) {
        var errorMsg = 'Overriding script could not be loaded.'; 
        callback(errorMsg);
      });
  }
  
  /**
   * Fetch the local cim chat data from a JSON source, parse it and return as
   * object
   * 
   * @param {string} globalWidgetDataURL 
   * @param {string} test - are we testing? 
   * 
   * @return {object} An object with the keys of the cimChats and the full cimChat data object
   */
  cimChatIntegration.fetchLocalChatList = function(globalWidgetDataURL, callback) {
    var testSuffix = (Drupal.settings.cim_chat.cim_chat_test_mode_active) ? '-test' : '',
        result = {},
        keys = [],
        errorMsg;
        globalWidgetDataURL+= testSuffix;
  
    // Get our local CIM chat data from the JSON feed generated by the Cyberhus CMS
    fetch(globalWidgetDataURL)
      .then(res => res.json())
      .then((out) => {
        buildChatDataObjects(out);
    }).catch(err => callback('CIM chat JSON could not be loaded: ' + err));
  
    function buildChatDataObjects(out) {
      // Build an array of chat IDs and a clean cimChat object
      for (var key in out.cimChats) {
        if (out.cimChats.hasOwnProperty(key)) {
          keys.push(key);
          var subObj = {};
          for (var i in out.cimChats[key]) {
            subObj[i] = Object.values(out.cimChats[key][i])[0];
            switch (i) {
              case 'field_cim_chat_url_name':
                subObj['cssClassName'] = 'cim-btn-' + subObj[i];
                break;
              case 'field_cim_chat_name':
                subObj['longName'] = subObj[i];
                break;
              case 'field_global_widget_location':
                subObj['domLocation'] = (subObj[i] === "kommune") ? ".municipality-chats" : ".cyberhus-chats";
                break;
              default:
                break;
            }
          }
          cimChats[key] = subObj;
        }
      }
      if (!cimChats) {
        errorMsg = 'Local CIM chat data could not be loaded.';
        callback(errorMsg);
        return;
      }
      result.keys = keys;
      result.cimChats = cimChats;
      callback(null, result);
    } 
  }
  /**
  * Helper function for the statusById event handler
  */
  cimChatIntegration.statusByIdHandler = function(item, index, arr) {
    var object = arr[index],
        status = object.status,
        statusText = object.statusText,
        id = object.id,
        className = cimChats[id].cssClassName,
        btnId = '.' + className;
    // We set the cimChatStatus to 'by-id-active' if any of the chats are ready / active / Busy.
    if (status === 'Ready' || status === 'Activ' || status === 'Busy') {
      cimChatStatus = 'by-id-active';
    }

    // Set status text. If status is closed or busyOffline, remove button
    if ($(btnId)[0]) { 
      if (status === 'Closed' || status === 'BusyOffline') {
        $(btnId).remove();
      }
      // 
      $(btnId + '.chat-status-title').text(cimChats[id].longName);
      $(btnId + ' .cim-dot').hide();
      $(btnId).attr('data-chat-status', status);
      return;
    }
    // Don't setup buttons in the closed or busyOffline states
    if (status === 'Closed' || status === 'BusyOffline') {
      return;
    }
    // Create status button
    Drupal.behaviors.cim_chatCreateStatusButton(id, status);

  };

  /**
   * Setup chat listeners
   * 
   */
  cimChatIntegration.cim_chatSetupSingleChatListeners = function () {
    // Event listener for ongoing single chat status updates
    cimChatIntegration.cim_chatAddListenerCmChatStatus();
  
    // Event listener for ongoing single chat queue status updates
    cimChatIntegration.cim_chatAddListenerCmUpdatePositionInQueue();
  
    // Event listener for when the counselor "takes" a conversation
    cimChatIntegration.cim_chatAddListenerCmConfirmReadyEvent();
  
    // Testing block start
    document[addEventListener ? 'addEventListener' : 'attachEvent']('cmConfirmedReady', function (event) { 
      confirmedReady(event); });
  
    function confirmedReady(event) {
      console.log('confirmedReady');
      console.dir(event.detail);
    }
  
    document[addEventListener ? 'addEventListener' : 'attachEvent']('cmIsWritingEvent', function (event) { 
      isWriting(event); });
  
    function isWriting(event) {
      console.log('isWriting');
      console.dir(event.detail);
    }
  
    document[addEventListener ? 'addEventListener' : 'attachEvent']('cmChatStartedEvent', function (event) {
      chatStarted(event); });
  
    function chatStarted(event) {
      console.log('chatStarted');
      console.dir(event.detail);
    }
  
    // End testing block
    
    // Add event handlers for hiding and closing chat via the button
    // in the corner of the chat window
    if (!$('.cm-Chat-header-menu-left')[0]) {
      console.warn('Error: Event listeners for chat panel items could not be added.');
    }
    $( '.cm-Chat-header-menu-left' ).on('click', function() {
      cm_HideChat();
      // We trigger an update to make sure the status is propagated
      // to the ribbon via the cimChatUpdate event
      cimChatIntegration.cim_chatSingleChatStatusUpdate();
    });
    $( '.cm-Chat-header-menu-right' ).on('click', cimChatIntegration.cim_chatCloseConversation);
  };
  
  cimChatIntegration.cim_chatAddListenerCmChatStatus = function() {
    cmSingleChatStatusListener = function (event) {
      cimChatIntegration.cim_chatSingleChatStatusUpdate(event);
    };
    // Event listener for ongoing single chat queue status updates
    document.addEventListener("cmChatStatusEvent", cmSingleChatStatusListener, true);
  };
  
  cimChatIntegration.cim_chatAddListenerCmUpdatePositionInQueue = function() {
    cmUpdatePositionInQueueListener = function (event) {
      cimChatIntegration.cim_chatSingleChatStatusUpdate(event);
    };
    // Event listener for ongoing single chat queue status updates
    document.addEventListener("cmUpdatePositionInQueueEvent", cmUpdatePositionInQueueListener, true);
  };
  
  cimChatIntegration.cim_chatAddListenerCmConfirmReadyEvent = function() {
    cmConfirmReadyEventListener = function (event) {
      cimChatIntegration.cim_chatSingleChatStatusUpdate(event);
    };
    // Event listener for when counselor "takes" a conversation
    document.addEventListener("cmConfirmReadyEvent", cmConfirmReadyEventListener, true);
  };

  /**
   * Remove chat listeners
   */
  cimChatIntegration.removeChatEventListeners = function(key) {
    switch (key) {
      case 'singleChat':
        document.removeEventListener('cmUpdatePositionInQueueEvent', cmUpdatePositionInQueueListener);
        document.removeEventListener('cmChatStatusEvent', cmSingleChatStatusListener);
        document.removeEventListener('cmConfirmReadyEvent', cmConfirmReadyEventListener);
        break;
      case 'statusById':
        document.removeEventListener('cmStatusByChatIdsUpdatedEvent', cmStatusByIdListener);
        break;
      default:
        break;
    }

  };

  /**
   * Delete all session data and reset cim chat global vars
   */
  cimChatIntegration.clearChatSessionData = function() {
    //$.cookie('cim-chat', null, { path: '/' });
    //$('#cim-mobility-chat').remove();
    // @todo: Clear CIM and local chat data
    //$.cookie('cm_UniqueUserId', null, { path: '/' });
    sessionStorage.removeItem('cimChatSessionTokenValue');
    cm_QueueNumber = null;
    cm_QueueStatus = null;
  }
})(jQuery, Drupal)
