var cimChatIntegration = {};

(function($, Drupal){
  var cimChats = {},
      globalWidgetHost = location.protocol + '//' + location.hostname,
      globalWidgetDataURL = globalWidgetHost + '/cim-chat-json',
      testMode = true, //Drupal.settings.cim_chat.cim_chat_test_mode_active ? true : false;
      chatServerURL = testMode
        ? "https://chattest.ecmr.biz"
        : "https://chat.ecmr.biz",
      cmSingleChatStatusListener,
      cmUpdatePositionInQueueListener,
      cmConfirmReadyEventListener; // Listeners for events from the CIM chat server

  /**
   * Add our templates, using Javascript Templates
   * https://github.com/blueimp/JavaScript-Templates
   */
  cimChatIntegration.addTemplates = function(callback) {
    console.log('adding templates');
    var path,
        templates = ['status_button','panel'];
    
    templates.forEach(element => {
      path = '/sites/all/modules/custom/cim_chat/templates/' + element + '.html';
      $.get( path, function(data) {
        $( "body" ).append( data );
      })
        .done(function(data) {
          //$( "body" ).append( data );
          callback(null);
        })
        .fail(function() {
          callback('Template ' + element + ' could not be loaded.');
        })
    });
  };

  // @todo: this should maybe go aonther place?
  cimChatIntegration.addTemplates(function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });

  /**
   * Load overriding functions
   */
  // Note: We will not get errors if the domain is wrong.
  // https://stackoverflow.com/questions/1406537/handling-errors-in-jquery-getscript
  cimChatIntegration.loadOverrides = function(scriptBase, callback) {
    $.getScript( scriptBase + "/sites/all/modules/custom/cim_chat/js/cim_chat_overrides.js" )
      .done(function( script, textStatus ) {
        callback(null);
      })
      .fail(function( jqxhr, settings, exception ) {
        var errorMsg = 'Overriding script could not be loaded.'; 
        callback(errorMsg);
      });
  }
  
  /**
   * Fetch the local cim chat data from a JSON source, parse it and return as
   * object
   * 
   * @param {string} globalWidgetDataURL 
   * @param {string} test - are we testing? 
   * 
   * @return {object} An object with the keys of the cimChats and the full cimChat data object
   */
  cimChatIntegration.fetchLocalChatList = function(globalWidgetDataURL, callback) {
    var testSuffix = (Drupal.settings.cim_chat.cim_chat_test_mode_active) ? '-test' : '',
        result = {},
        keys = [],
        errorMsg;
        globalWidgetDataURL+= testSuffix;
  
    // Get our local CIM chat data from the JSON feed generated by the Cyberhus CMS
    fetch(globalWidgetDataURL)
      .then(res => res.json())
      .then((out) => {
        buildChatDataObjects(out);
    }).catch(err => callback('CIM chat JSON could not be loaded: ' + err));
  
    function buildChatDataObjects(out) {
      // Build an array of chat IDs and a clean cimChat object
      for (var key in out.cimChats) {
        if (out.cimChats.hasOwnProperty(key)) {
          keys.push(key);
          var subObj = {};
          for (var i in out.cimChats[key]) {
            subObj[i] = Object.values(out.cimChats[key][i])[0];
            switch (i) {
              case 'field_cim_chat_url_name':
                subObj['cssClassName'] = 'cim-btn-' + subObj[i];
                break;
              case 'field_cim_chat_name':
                subObj['longName'] = subObj[i];
                break;
              case 'field_global_widget_location':
                subObj['domLocation'] = (subObj[i] === "kommune") ? ".municipality-chats" : ".cyberhus-chats";
                break;
              default:
                break;
            }
          }
          cimChats[key] = subObj;
        }
      }
      if (!cimChats) {
        errorMsg = 'Local CIM chat data could not be loaded.';
        callback(errorMsg);
        return;
      }
      result.keys = keys;
      result.cimChats = cimChats;
      // cimChatIntegration.addTemplates(function(err) {
      //   if (err) {
      //     console.error(err);
      //     return;
      //   }
      // });
      
      callback(null, result);
    } 
  }

  /**
   * Setup chat listeners
   * 
   */
  cimChatIntegration.cim_chatSetupSingleChatListeners = function () {
    // Event listener for ongoing single chat status updates
    cimChatIntegration.cim_chatAddListenerCmChatStatus();
  
    // Event listener for ongoing single chat queue status updates
    cimChatIntegration.cim_chatAddListenerCmUpdatePositionInQueue();
  
    // Event listener for when the counselor "takes" a conversation
    cimChatIntegration.cim_chatAddListenerCmConfirmReadyEvent();
  
    // Testing block start
    document[addEventListener ? 'addEventListener' : 'attachEvent']('cmConfirmedReady', function (event) { 
      confirmedReady(event); });
  
    function confirmedReady(event) {
      console.log('confirmedReady');
      console.dir(event.detail);
    }
  
    document[addEventListener ? 'addEventListener' : 'attachEvent']('cmIsWritingEvent', function (event) { 
      isWriting(event); });
  
    function isWriting(event) {
      console.log('isWriting');
      console.dir(event.detail);
    }
  
    document[addEventListener ? 'addEventListener' : 'attachEvent']('cmChatStartedEvent', function (event) {
      chatStarted(event); });
  
    function chatStarted(event) {
      console.log('chatStarted');
      console.dir(event.detail);
    }
  
    // End testing block
    
    // Add event handlers for hiding and closing chat via the button
    // in the corner of the chat window
    if (!$('.cm-Chat-header-menu-left')[0]) {
      console.warn('Error: Event listeners for chat panel items could not be added.');
    }
    $( '.cm-Chat-header-menu-left' ).on('click', function() {
      cm_HideChat();
      // We trigger an update to make sure the status is propagated
      // to the ribbon via the cimChatUpdate event
      cimChatIntegration.singleChatStatusUpdate();
    });
    $( '.cm-Chat-header-menu-right' ).on('click', cimChatIntegration.cim_chatCloseConversation);
  };
  
  cimChatIntegration.cim_chatAddListenerCmChatStatus = function() {
    cmSingleChatStatusListener = function (event) {
      cimChatIntegration.singleChatStatusUpdate(event);
    };
    // Event listener for ongoing single chat queue status updates
    document.addEventListener("cmChatStatusEvent", cmSingleChatStatusListener, true);
  };
  
  cimChatIntegration.cim_chatAddListenerCmUpdatePositionInQueue = function() {
    cmUpdatePositionInQueueListener = function (event) {
      cimChatIntegration.singleChatStatusUpdate(event);
    };
    // Event listener for ongoing single chat queue status updates
    document.addEventListener("cmUpdatePositionInQueueEvent", cmUpdatePositionInQueueListener, true);
  };
  
  cimChatIntegration.cim_chatAddListenerCmConfirmReadyEvent = function() {
    cmConfirmReadyEventListener = function (event) {
      cimChatIntegration.singleChatStatusUpdate(event);
    };
    // Event listener for when counselor "takes" a conversation
    document.addEventListener("cmConfirmReadyEvent", cmConfirmReadyEventListener, true);
  };

  /**
   * Remove chat listeners
   */
  cimChatIntegration.removeChatEventListeners = function(key) {
    switch (key) {
      case 'singleChat':
        document.removeEventListener('cmUpdatePositionInQueueEvent', cmUpdatePositionInQueueListener);
        document.removeEventListener('cmChatStatusEvent', cmSingleChatStatusListener);
        document.removeEventListener('cmConfirmReadyEvent', cmConfirmReadyEventListener);
        break;
      case 'statusById':
        document.removeEventListener('cmStatusByChatIdsUpdatedEvent', cmStatusByIdListener);
        break;
      default:
        break;
    }
  };

  // Drupal.behaviors.cim_chatAddListenerStatusById 
  cimChatIntegration.addListenerStatusById = function() {
    cmStatusByIdListener = function (event) {
      cimChatIntegration.statusByChatIdsUpdated(event);
    };
    // Listen for updates from the list of chats we have embedded
    document.addEventListener("cmStatusByChatIdsUpdatedEvent", cmStatusByIdListener, true);
  };

  //Drupal.behaviors.cim_chatStatusByChatIdsUpdated
  cimChatIntegration.statusByChatIdsUpdated = function (event) {
    var object = event.detail;
    cimChatStatus = 'closed';
    if (object) { 
      object.forEach(cimChatIntegration.statusByIdHandler);
      // The Opeka Widgets module is listening to this event
      $( document ).trigger( "cimChatUpdate", [ cimChatStatus ] );
    }
  };

  /**
  * Helper function for the statusById event handler
  */
  cimChatIntegration.statusByIdHandler = function(item, index, arr) {
    var object = arr[index],
        status = object.status,
        statusText = object.statusText,
        id = object.id,
        className = cimChats[id].cssClassName,
        btnId = '.' + className,
        params;
    // We set the cimChatStatus to 'by-id-active' if any of the chats are ready / active / Busy.
    if (status === 'Ready' || status === 'Activ' || status === 'Busy') {
      cimChatStatus = 'by-id-active';
    }

    // Set status text. If status is closed or busyOffline, remove button
    if ($(btnId)[0]) { 
      if (status === 'Closed' || status === 'BusyOffline') {
        $(btnId).remove();  
      }
      // 
      $(btnId + '.chat-status-title').text(cimChats[id].longName);
      $(btnId + ' .cim-dot').hide();
      $(btnId).attr('data-chat-status', status);
      return;
    }
    // Don't setup buttons in the closed or busyOffline states
    if (status === 'Closed' || status === 'BusyOffline') {
      return;
    }
    // Create / update status button
    params = {
      id: id,
      status: status,
    },
    cimChatIntegration.updateTemplates('status_button', params);
  };

  cimChatIntegration.singleChatStatusUpdate = function (event) {
    var id = ((cm_chatId === undefined) || (cm_chatId === 0)) ? null : cm_chatId,
        btnId = cimChats[id] ? '.' + cimChats[id].cssClassName : '',
        longName = cimChats[id] ? cimChats[id].longName : '';

    if (event && event.detail.approvalattempt) {
      if (event.detail.approvalattempt == 1 || event.detail.approvalattempt == 2) {
          // Counselor takes the conversation - maximise chat window if needed
          //cimChatStatus =  'single-chat-active';
          console.log('approvalattemt: ', event.detail.approvalattempt);
      }
    }
    if (!cm_QueueStatus && cimChatStatus != 'single-chat-queue-signup' && cm_status === 'Activ' ) {
      // Start monitoring the queue position
      cimChatStatus = 'single-chat-queue-signup';
      cm_StartQueuTimer();
    }
    if (cm_status === 'Activ') {
      // show the minimize chat panel icon
      $('.cm-Chat-header-menu-left').css('display', 'inline');
    }
    if (cm_QueueNumber === 0 || cm_status === 'Ready') {
      cimChatStatus =  'single-chat-active';
    }
    if (cm_QueueNumber > 0 ) {
      // The moment the user enters the queue we 
      // - set the sessionStorage chat id
      // - hide the three dots fetching status animation 
      if (cimChatStatus === 'single-chat-queue-signup') {
        //Drupal.behaviors.cim_chatSetCookie(cm_chatId);
        cimChatStatus = 'single-chat-queue';
        $(btnId + ' .cim-dot').hide();
        
      }
    }
    $( document ).trigger( "cimChatUpdate", [ cimChatStatus, longName, cm_QueueNumber ] );
    cimChatIntegration.globalButtonUpdate(cm_chatId);
  };

  /**
   * Delete all session data and reset cim chat global vars
   */
  cimChatIntegration.clearChatSessionData = function() {
    //$.cookie('cim-chat', null, { path: '/' });
    //$('#cim-mobility-chat').remove();
    // @todo: Clear CIM and local chat data
    //$.cookie('cm_UniqueUserId', null, { path: '/' });
    sessionStorage.removeItem('cimChatSessionTokenValue');
    cm_QueueNumber = null;
    cm_QueueStatus = null;
  }

  /**
   * Update our templates, using Javascript Templates
   * https://github.com/blueimp/JavaScript-Templates
   */
  cimChatIntegration.updateTemplates = function(templateId, params) {
    var data,
        btnId;
    switch (templateId) {
      case 'status_button':
        data = {
          className: cimChats[params.id].cssClassName,
          status: params.status,
          longName: cimChats[params.id].longName,
          queueStatus: params.queueStatus,
          queueNumber: params.queueNumber
        },
        btnId = cimChats[params.id].domLocation + ' .' + cimChats[params.id].cssClassName
        // Add status button to DOM if hasn't been done already
        if (!$(cimChats[params.id].domLocation + ' .' + cimChats[params.id].cssClassName)[0]){
          // Add wrapper
          $(cimChats[params.id].domLocation).append(
            '<div class="chat-status ' + cimChats[params.id].cssClassName + '"></div>'
          );
          $(btnId).html(tmpl('tmpl_status_button', data));
          // Add click handler
          $( btnId ).on('click', {id: params.id}, cimChatIntegration.handleChatBtnClick);
          return;
        }
        $(btnId).html(tmpl('tmpl_status_button', data));
        break;
      case 'panel':
        console.log('updating the panel');

        data = {
          windowTitle: params.windowTitle,
          closeState: params.closeState,
          closeWindowText: params.closeWindowText
        };
        if (!$('#cim-mobility-chat')[0]) {
          return;
        }
        $("#cim-mobility-chat").html(tmpl('tmpl_panel', data));
        break;
      default:
        break;
    }

    //document.getElementById('block-menu-menu-andet').innerHTML = tmpl('tmpl-demo', data);

  };



  /**
   * Setup the assets for StatusById mode
   */
  cimChatIntegration.setupStatusByIdAssets = function () {
    var cimChatIds,
        cimChatIdsObj;

    cimChatIntegration.fetchLocalChatList(globalWidgetDataURL, function(err, result) {

      if (err) {
        cimChatStatus = 'no-chats-defined';
        return;
      }
  
      // skip if the statusById Iframe is set up already or there are no keys.
      if ($('.iframeWrapper.cim-status')[0] || !result.keys) {
        return;
      }
      $('body').append(
        '<div class="iframeWrapper cim-status">' +
          '<iframe class="cm-Chat-container" src="" style="vertical-align:top;"></iframe>' +
        '</div>'
      );
      cimChatIds = result.keys.join(", ");
      cimChatIdsObj = { chatIds: cimChatIds };

      cimChatIntegration.addListenerStatusById();
      // Get the status of the chats we are monitoring
      // Note: CIM chat does not support monitoring multiple serverURLs simultaneously (eg. test and production)

      cm_InitiateChatStatus(cimChatIdsObj, chatServerURL + '/ChatClient/StatusIndex');
    });
  };


  cimChatIntegration.setupSingleChatAssets = function(callback) {
    var params;
    if (typeof cm_InitiateChatStatus === "undefined") {
      var errorMsg = 'External CIM script could not be loaded.';
      callback(errorMsg);
      return;
    }

    params = {
      windowTitle: 'hej',
      closeState: 'first',
      closeWindowText: 'Afslut'
    }
    if (!$('#cim-mobility-chat')[0]) {
      $('body').append('<div id="cim-mobility-chat"></div>');
    }
    cimChatIntegration.updateTemplates('panel', params);
    // Add event listeners once the dom elements are in place
    cimChatIntegration.cim_chatSetupSingleChatListeners();
    callback(null);
  };

  /* 
   * Handle button click
   * Initiate chat client if chat is ready
   */
  cimChatIntegration.handleChatBtnClick = function (event) {
    console.dir(event.data.id);
    var id = event.data.id,
      btnId = '.' + cimChats[id].cssClassName,
      status = $(btnId).attr('data-chat-status');

    if (status === 'Ready') {
      Drupal.behaviors.cim_chatSingleChatInit(id);
    }
  };

  cimChatIntegration.globalButtonUpdate = function(id) {
    var btnId = cimChats[id]
        ? ('.' + cimChats[id].cssClassName)
        : '',
      queueStatus = '',
      chatStatus = 'Ready',
      queueNumber = '',
      params;
    if (!cm_QueueStatus && (cm_status === 'Activ' || cm_status === 'NotLoaded' )) {
      // Show the fetching state animation until we get the queue status
      $(btnId + ' .cim-dot').css('display', 'inline-block');
    }
    if (cm_QueueStatus === 'Waiting') {
      queueStatus = Drupal.t(': queue #');
      queueNumber = cm_QueueNumber;
      chatStatus = 'Queue';
      $(btnId + ' .cim-dot').hide();
    }
    else if (cm_QueueStatus === 'Ready') {
      queueStatus = Drupal.t(': chatting');
      queueNumber = '';
      chatStatus = 'Chatting';
      $(btnId + ' .cim-dot').hide();
    }
    params = {
      id: id,
      status: chatStatus,
      queueStatus: queueStatus,
      queueNumber: queueNumber
    },
    cimChatIntegration.updateTemplates('status_button', params);
  }

  Drupal.behaviors.Depr_cim_chatButtonUpdate = function(id) {
    var btnId = cimChats[id]
        ? ('.' + cimChats[id].cssClassName)
        : '',
      statusText = '',
      dataChatStatus = 'Ready',
      queueNumber = '';
    if (!cm_QueueStatus && (cm_status === 'Activ' || cm_status === 'NotLoaded' )) {
      // Show the fetching state animation until we get the queue status
      $(btnId + ' .cim-dot').css('display', 'inline-block');
    }
    if (cm_QueueStatus === 'Waiting') {
      statusText = Drupal.t(': queue #');
      queueNumber = cm_QueueNumber;
      dataChatStatus = 'Queue';
      $(btnId + ' .cim-dot').hide();
    }
    else if (cm_QueueStatus === 'Ready') {
      statusText = Drupal.t(': chatting');
      queueNumber = '';
      dataChatStatus = 'Chatting';
      $(btnId + ' .cim-dot').hide();
    }
    $(btnId).attr('data-chat-status', dataChatStatus);
    $(btnId + ' .queue-status').text(statusText);
    $(btnId + ' .queue-number').text(queueNumber);
  } 


})(jQuery, Drupal)
