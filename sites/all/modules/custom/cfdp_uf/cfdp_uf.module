<?php
/*
 * Implementation of hook_form_alter()
 */
function cfdp_uf_form_alter(&$form, &$form_state, $form_id){
  switch ($form_id) {
    case 'body_secret_node_form':
      // request uri
      $uri =  request_uri();
      // we are on a Enable-2-act page
      if ($uri == "/hemmeligheder?edit[field_secrets_category][und][2335]=enable-2-act") {
        drupal_set_message("You can always go back to <a href='/node/41282' title='ENABLE-2ACT'>ENABLE-2-ACTs</a> front page. ");
      }
    break;
    case 'forum_node_form':
      // request uri
      $uri =  request_uri();
      // we are on a Enable-2-act page
      if ($uri == "/node/add/forum/2334") {
        drupal_set_message("You can always go back to <a href='/node/41282' title='ENABLE-2ACT'>ENABLE-2-ACTs</a> front page. ");
      }
    break;
    case 'image_node_form':
      $hide_age_field = false;
      /* Tegn selv moderator user do not need to enter age on own images -
      @todo: calculate from profile birthday field */
      // Tegn selv moderator creates a new image
      if (user_has_role(11) && $form['#action'] == '/node/add/image') {
        $hide_age_field = true;
      }
      // Tegn selv moderator edits an image she owns
      else if (user_has_role(11) && ($form['uid']['#value'] == $form['#node']->uid)) {
        $hide_age_field = true;
      }
      if ($hide_age_field) {
        $lang = $form['field_brevk_alder']['#language'];
        $form['field_brevk_alder'][$lang]['#required'] = false;
        $form['field_brevk_alder']['#access'] = 0;
      }
    break;
    case 'user_profile_form':
      $user_roles = $form['#user']->roles;
      // Only show the brevkassefields if user page belongs to a brevkasseredaktør
      if (!array_key_exists(5,$user_roles)) {
        $form['field_account_brevkasse']['#access'] = 0;
      }
    break;
    case 'brevkasse_node_form':
      // Brevkasse-status: Iterate over the terms and unset any closed or archived terms from the select list
      $brevk_terms = taxonomy_term_load_multiple(array(), array('vid' => '3'));
      foreach ($brevk_terms as $key => $value) {
          if (count($value->field_taxonomy_brevk_status) > 0){
            $status = $value->field_taxonomy_brevk_status['und']['0']['value'];
            if ($status === "archived" || $status === "temp_closed") {
              $tid = $value ->tid;
              unset($form['field_brevk_kategori']['und']['#options'][$tid]);
            }
          }
      }

      // Brevkasse title validation, alowed charaters (a to z, 0 to 9, ?, !, ., ,, -,)
      $form['#validate'][] = 'cfdp_uf_brevkasse_title_form_validate';

      // @todo: deactivated until the right condition sorting out the archived terms
      // has been implemented
      // Populate select list with the long version of the category names
      //Select the taxonomy vocabulary holding the values for the brevkasse categories

/*      $taxonomy = "vocabulary_3";
      $closed_states = array(
        "temp_closed",
        "archived"
      );

      //Query the DB for the extra added field holding the labels (long version names of the brevkasse categories)
      $results = db_select('field_data_field_brev_tax_label', 't')
        ->fields('t', array('entity_id', 'field_brev_tax_label_value'))
        ->condition("t.bundle", $taxonomy)
        ->execute();

      // Populate the selectlist with the new values
      $options = array();
      foreach ($results as $term)  {
        $form['field_brevk_kategori']['und']['#options'][$term->entity_id] = $term->field_brev_tax_label_value;
      }*/
    break;
  }
  // Change submit text to "Send" on all node forms
  if ((isset($form['#node_edit_form']) && $form['#node_edit_form'])) {
    $form['actions']['submit']['#value'] = 'Send';
  }
}

function cfdp_uf_form_comment_form_alter(&$form, &$form_state) {
  if (isset($form['actions']['submit'])) {
    $form['actions']['submit']['#value'] = t('Send');
  }
}

/*
*  Set custom status message
*
*/
/*function cfdp_uf_custom_status_message(&$form, $form_state) {
  // To hide message
  drupal_get_messages('status');
  //To override message
  drupal_set_message(t('Tak fordi du delte din hemmelighed med cyberhus.dk!'), 'status');
 }*/


  /* 
  *  If all the chars in the string are chars that the URL cleaner will remove, title is invalid. 
  *  The title needs to have AT LEAST ONE char that is allowed by the cleaner.
  */
function cfdp_uf_brevkasse_title_form_validate($form, &$form_state) {
  $title = $form_state['values']['title'];
  $title_length = strlen($form_state['values']['title']);
  $title_characters = str_split($form_state['values']['title']);
  $title_valid = FALSE;

  if($title_length >= 3){
    foreach($title_characters as $char){
      if(preg_match('/[a-zåæø0-9]/i', $char)){
      
        $title_valid = TRUE;
      }
    }

      if(!$title_valid){
        form_set_error('title', t('You have invalid charaters in your title.'));
      }
    
  }else{
    form_set_error('title', t('Your title is too short.'));
  }
}

function cfdp_uf_node_update($node) {
  global $user;
  //if it is the first time the brevkasse node is edited by a counselor (=the author is anonymous), change the author to the current user
  if (($node->uid == 0) && ($node->type == "brevkasse") && cfdp_uf_user_has_role('Brevkasserådgiver')) {
    $node->uid = $user->uid;
    node_save($node);
    drupal_set_message(t('Author of Brevkasse node changed from anonymous to ').$user->name);
  }
}

/**
* Check to see if a user has been assigned a certain role.
*
* @param $role
*   The name of the role you're trying to find.
* @param $user
*   The user object for the user you're checking; defaults to the current user.
* @return
*   TRUE if the user object has the role, FALSE if it does not.
*/
function cfdp_uf_user_has_role($role, $user = NULL) {
  if ($user == NULL) {
    global $user;
  }
  if (is_array($user->roles) && in_array($role, array_values($user->roles))) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Check if the current time is within opening hours
 * @return
 *   TRUE if the current time is within opening hours
 * @todo opening hours should be configurable fields in the administration
 */
function cfdp_uf_open_to_posts() {
  $open = true;
  $closingtime = 22;
  $openingtime = 9;
  $timezone = new DateTimeZone( "Europe/Copenhagen" );
  $date = new DateTime();
  $date->setTimezone($timezone);
  $present_hour =  $date->format('H');
  if($present_hour > ($closingtime -1) || $present_hour < $openingtime ){
    $open = false;
  }
  return $open;
}

/**
 * Implements hook_views_api().
 *
 * We are storing some of our views in code
 */
function cfdp_uf_views_api() {
  return array(
    // Indicates the Views API Version:
    // Views 2 = 2
    // Views 3 = 3 (Latest)
    'api' => 3,
    // This is the path to your views files.
    'path' => drupal_get_path('module', 'cfdp_uf') . '/views',
  );
}

/* Helper function for front page View - used for displaying the right svg img */
function cfdp_uf_front_page_svg($content_type) {
  $svg = 'forum'; // default;
  switch ($content_type) {
    case 'body_secret':
        $svg = 'secrets';
        break;
    case 'forum':
        $svg = 'forum';
        break;
    case 'blog':
        $svg = 'blog';
        break;
    case 'image':
        $svg = 'images';
        break;
    case 'brevkasse':
        $svg = 'letterbox';
        break;
    case 'historie':
        $svg = 'forum';
        break;
    case 'link_artikel':
        $svg = 'articles';
        break;
    default:
        echo $content_type;
  }
  print file_get_contents(DRUPAL_ROOT . "/sites/all/themes/cyberhus_evolution/images/icons/svg/" . $svg . ".svg");
}

/**
 * Protect our custom comment form in node.tpl.php with Mollom
 *
 * Implements hook_mollom_form_list().
 */
function cfdp_uf_mollom_form_list() {
  $forms['comment_form'] = array(
    'title' => 'Cyberhus custom comment form',
  );
  return $forms;
}

/**
 * Implements hook_mollom_form_info().
 */
function cfdp_uf_mollom_form_info($form_id) {
  switch ($form_id) {
    case 'comment_form':
      $form_info = array(
        'mode' => MOLLOM_MODE_CAPTCHA,
      );
      return $form_info;
  }
}

/**
 * Remove the N/A option from radio buttons
 */
function cfdp_uf_element_info_alter(&$type) {
  $type['radios']['#process'][] = '_cfdp_uf_remove_radio_na';
}

/**
 * Remove the N/A option from radio buttons
 */
function _cfdp_uf_remove_radio_na($element) {
  unset($element['#options']['_none']);
  unset($element['_none']);
  return $element;
}

/**
 * Implements of hook_node_view()
 */
function cfdp_uf_node_view($node, $view_mode, $langcode) {
  /* Send along user signature for registered users */
  if (($node->uid) !== 0) {
    $reg_user = user_load($node->uid);
    if (isset($reg_user->signature)) {
      if (($node->type == 'blog' || $node->type == 'image' ) && $view_mode == 'full') {
       $signature = check_markup($reg_user->signature, 1);
        $node->content['signature'] = array(
         "#markup"=> '<div class="user-signature clearfix">'.$signature.'</div>',
         "#weight"=> 3
        );
      }
    }
  }
}
