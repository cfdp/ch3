// Su Grid Tests
// =============


// Su Span
// -------
@include test-module ('Su Span [function]') {
  @include test('Fluid') {
    @include assert-equal(
      su-span(2, 1 1 1 1, 0.25, -1, 0),
      percentage(2.25/5),
      'Returns fluid span if no units are given');
  }

  @include test('Static') {
    @include assert-equal(
      su-span(2, 4em 4em 4em 4em, 0.25em, -1, 0),
      8.25em,
      'Returns static span if units are given');
  }

  @include test('Explicit column span') {
    @include assert-equal(
      su-span(2 3, 2 4 6 8, 0.25, 0, 0),
      percentage(5.5/21),
      'Handles explicit column-spans');
  }

  @include test('Explicit length span') {
    @include assert-equal(
      su-span(50%, 2 4 6 8, 0.25, 0, 1),
      50%,
      'Handles explicit length-spans');
  }

  @include test('Mixed fluid-static') {
    @include assert-equal(
      su-span(300px 2, 300px 2 1 20px, 10px, -1),
      'calc(310px + ((100% - 350px) / 3 * 2))');
  }

  @include test('Mixed static') {
    $span-list: (2);
    @include assert-equal(
      su-span($span-list, 300mm 2 1 20cm, 1em, 0, 1),
      'calc((300mm + 2em) + ((100% - (500mm + 5em)) / 3 * 2))');
  }

  @include test('Mixed static with location') {
    @include assert-equal(
      su-span(2, 300mm 2 1 20cm, 1em, -1, -1, 2),
      'calc(1em + (100% - (500mm + 3em)))');
  }

  @include test('Single span, mixed columns and gutters') {
    @include assert-equal(
      su-span(1, 1 2 40pt 3 10em, 0.125in, -1, -1, 3),
      40pt);
  }
}


// Su Gutter
// ---------
@include test-module('Su Gutter [function]') {
  @include test('Static gutters') {
    @include assert-equal(
      su-gutter(4, 1em, 0),
      1em,
      'Static gutters are returned directly');
  }

  @include test('Fluid gutters') {
    @include assert-equal(
      su-gutter(2 4 6, 0.25, -1),
      percentage(0.25/12.5),
      'Gutters are calculated as a percentage of context');
  }
}


// Su Sum
// ------
@include test-module('Su Sum [function]') {
  @include test('Calculate the total units in a fluid grid') {
    @include assert-equal(
      _su-sum(1 1 1, 0.5, 1),
      5,
      'Returns combined column and gutter units');
  }

  @include test('Calculate the total units in a static grid') {
    @include assert-equal(
      _su-sum(1em 2em 3em 1em 2em, 0.25em, -1),
      10em,
      'Returns combined column and gutter units');
  }

  @include test('Ignore 0 gutters') {
    @include assert-equal(
      _su-sum(10em, 0.25pt, -1),
      10em);
  }

  @include test('Handle single-column spans') {
    $span: (4);

    @include assert-equal(
      _su-sum($span, 0.5, -1),
      4,
      'No static gutters are added to fluid grids');
  }
}


// Su Slice
// --------
@include test-module('Su Slice [function]') {
  @include test('Slice a grid') {
    @include assert-equal(
      su-slice(3, 1em 1em 2em 3em 5em 8em, 3),
      2em 3em 5em,
      'Returns subset of asymmetrical columns based on span and location');
  }

  @include test('Slice a grid with fractions') {
    @include assert-equal(
      su-slice(2.5, 2 4 6 8, 1),
      2 4 3,
      'Slice a fraction of an asymmetrical column');
  }
}


// Su Calc Sum
// -----------
@include test-module('Su Calc Sum [function]') {
  @include test('Mixed fluid-static') {
    $map: (
      'fixed': '350px',
      'fluid': 3,
    );

    @include assert-equal(
      _su-calc-sum(300px 2 1 20px, 10px, -1),
      $map);
  }

  @include test('Mixed static') {
    $map: (
      'fixed': '(500mm + 4em)',
      'fluid': 3,
    );

    @include assert-equal(
      _su-calc-sum(300mm 2 1 20cm, 1em, 0),
      $map);
  }

  @include test('Zero handling') {
    $map: (
      'fixed': '4em',
      'fluid': null,
    );

    @include assert-equal(
      _su-calc-sum(4em, 0.125in, -1),
      $map);
  }
}


// Su Calc Span
// ------------
@include test-module('Su Calc Span [function]') {
  @include test('Mixed fluid-static') {
    @include assert-equal(
      _su-calc-span(300px 2, 300px 2 1 20px, 10px, -1),
      'calc(310px + ((100% - 350px) / 3 * 2))');
  }

  @include test('Mixed static') {
    @include assert-equal(
      _su-calc-span(2, 300mm 2 1 20cm, 1em, 0, 1),
      'calc(1em + ((100% - (500mm + 5em)) / 3 * 2))');
  }
}

// Needs Calc
// ----------
@include test-module('Su Needs Calc [function]') {
  @include test('Fully fluid') {
    @include assert-false(
      _su-needs-calc-output(1 2 4 2, 1 2 4 2 6 8, 0.5, -1));
  }

  @include test('Fully static') {
    $span: 10cm 200mm 45cm 230mm;
    $columns: 10cm 200mm 45cm 230mm 25px;

    @include assert-false(
      _su-needs-calc-output($span, $columns, 2cm, -1));
  }

  @include test('Static span and gutters') {
    $span: 10cm 200mm 45cm 230mm;
    $columns: 10cm 200mm 4 2 25em;

    @include assert-false(
      _su-needs-calc-output($span, $columns, 2cm, -1));
  }

  @include test('Mismatched span units (complex)') {
    $span: 1px 2 4em 3;
    $columns: 100px 200px 400px 300px 250px;

    @include assert-true(
      _su-needs-calc-output($span, $columns, 10px, -1));
  }

  @include test('Mismatched span units (simple)') {
    $span: 1 2 4em 3;
    $columns: 1 2 4em 3 10em;

    @include assert-true(
      _su-needs-calc-output($span, $columns, 0.25, -1));

    @include assert-true(
      _su-needs-calc-output($span, $columns, 0.25em, -1));
  }

  @include test('Mismatched gutter units') {
    $span: 1em 2em 4em 3em;
    $columns: 1em 2em 4em 3em 10em;

    @include assert-true(
      _su-needs-calc-output($span, $columns, 10px, -1));
  }

  @include test('Fluid span and gutters, mixed columns') {
    $span: 1 2 4 3;
    $columns: 1 2 4 3 10em;

    @include assert-true(
      _su-needs-calc-output($span, $columns, 0.25, -1));
  }

  @include test('Single span, mixed columns and gutters') {
    $span: (40pt,);
    $columns: 1 2 40pt 3 10em;

    @include assert-false(
      _su-needs-calc-output($span, $columns, 0.25, -1));
  }

  @include test('Single wide span, mixed columns and gutters') {
    $span: (4em,);
    $columns: susy-repeat(4, 4em);

    @include assert-true(
      _su-needs-calc-output($span, $columns, 5mm, 0));
  }
}
