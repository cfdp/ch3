<?php
/*
 * Implementation of hook_form_alter()
 */
function cfdp_uf_form_alter(&$form, &$form_state, $form_id){
  switch ($form_id) {
    case 'body_secret_node_form':
      // request uri
      $uri =  request_uri();
      // we are on a Enable-2-act page
      if ($uri == "/hemmeligheder?edit[field_secrets_category][und][2335]=enable-2-act") {
        drupal_set_message("You can always go back to <a href='/node/41282' title='ENABLE-2ACT'>ENABLE-2-ACTs</a> front page. ");
      }
    break;
    case 'forum_node_form':
      // request uri
      $uri =  request_uri();
      // we are on a Enable-2-act page
      if ($uri == "/node/add/forum/2334") {
        drupal_set_message("You can always go back to <a href='/node/41282' title='ENABLE-2ACT'>ENABLE-2-ACTs</a> front page. ");
      }
    break;
    case 'image_node_form':
      $hide_age_field = false;
      /* Tegn selv moderator user do not need to enter age on own images -
      @todo: calculate from profile birthday field */
      // Tegn selv moderator creates a new image
      if (user_has_role(11) && $form['#action'] == '/node/add/image') {
        $hide_age_field = true;
      }
      // Tegn selv moderator edits an image she owns
      else if (user_has_role(11) && ($form['uid']['#value'] == $form['#node']->uid)) {
        $hide_age_field = true;
      }
      if ($hide_age_field) {
        $lang = $form['field_brevk_alder']['#language'];
        $form['field_brevk_alder'][$lang]['#required'] = false;
        $form['field_brevk_alder']['#access'] = 0;
      }
    break;
    case 'user_profile_form':
      $user_roles = $form['#user']->roles;
      // Only show the brevkassefields if user page belongs to a brevkasseredaktÃ¸r
      if (!array_key_exists(5,$user_roles)) {
        $form['field_account_brevkasse']['#access'] = 0;
      }
    break;
  }
  // Change submit text to "Send" on all node forms
  if ((isset($form['#node_edit_form']) && $form['#node_edit_form'])) {
    $form['actions']['submit']['#value'] = 'Send';
  }
}

function cfdp_uf_form_comment_form_alter(&$form, &$form_state) {
  if (isset($form['actions']['submit'])) {
    $form['actions']['submit']['#value'] = t('Send');
  }
}

/**
* Check to see if a user has been assigned a certain role.
*
* @param $role
*   The name of the role you're trying to find.
* @param $user
*   The user object for the user you're checking; defaults to the current user.
* @return
*   TRUE if the user object has the role, FALSE if it does not.
*/
function cfdp_uf_user_has_role($role, $user = NULL) {
  if ($user == NULL) {
    global $user;
  }
  if (is_array($user->roles) && in_array($role, array_values($user->roles))) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Check if the current time is within opening hours
 * @return
 *   TRUE if the current time is within opening hours
 * @todo opening hours should be configurable fields in the administration
 */
function cfdp_uf_open_to_posts() {
  $open = true;
  $closingtime = 22;
  $openingtime = 9;
  $timezone = new DateTimeZone( "Europe/Copenhagen" );
  $date = new DateTime();
  $date->setTimezone($timezone);
  $present_hour =  $date->format('H');
  if($present_hour > ($closingtime -1) || $present_hour < $openingtime ){
    $open = false;
  }
  return $open;
}

/**
 * Implements hook_views_api().
 *
 * We are storing some of our views in code
 */
function cfdp_uf_views_api() {
  return array(
    // Indicates the Views API Version:
    // Views 2 = 2
    // Views 3 = 3 (Latest)
    'api' => 3,
    // This is the path to your views files.
    'path' => drupal_get_path('module', 'cfdp_uf') . '/views',
  );
}

/* Helper function for front page View - used for displaying the right svg img */
function cfdp_uf_front_page_svg($content_type) {
  $svg = 'forum'; // default;
  switch ($content_type) {
    case 'body_secret':
        $svg = 'secrets';
        break;
    case 'forum':
        $svg = 'forum';
        break;
    case 'blog':
        $svg = 'blog';
        break;
    case 'image':
        $svg = 'images';
        break;
    case 'brevkasse':
        $svg = 'letterbox';
        break;
    case 'historie':
        $svg = 'forum';
        break;
    case 'link_artikel':
        $svg = 'articles';
        break;
    default:
        echo $content_type;
  }
  print file_get_contents(DRUPAL_ROOT . "/sites/all/themes/cyberhus_evolution/images/icons/svg/" . $svg . ".svg");
}

/**
 * Protect our custom comment form in node.tpl.php with Mollom
 *
 * Implements hook_mollom_form_list().
 */
function cfdp_uf_mollom_form_list() {
  $forms['comment_form'] = array(
    'title' => 'Cyberhus custom comment form',
  );
  return $forms;
}

/**
 * Implements hook_mollom_form_info().
 */
function cfdp_uf_mollom_form_info($form_id) {
  switch ($form_id) {
    case 'comment_form':
      $form_info = array(
        'mode' => MOLLOM_MODE_CAPTCHA,
      );
      return $form_info;
  }
}

/**
 * Remove the N/A option from radio buttons
 */
function cfdp_uf_element_info_alter(&$type) {
  $type['radios']['#process'][] = '_cfdp_uf_remove_radio_na';
}

/**
 * Remove the N/A option from radio buttons
 */
function _cfdp_uf_remove_radio_na($element) {
  unset($element['#options']['_none']);
  unset($element['_none']);
  return $element;
}

/**
 * Implements of hook_node_view()
 */
function cfdp_uf_node_view($node, $view_mode, $langcode) {
  /* Send along user signature for registered users */
  if (($node->uid) !== 0) {
    $reg_user = user_load($node->uid);
    if (isset($reg_user->signature)) {
      if (($node->type == 'blog' || $node->type == 'image' ) && $view_mode == 'full') {
       $signature = check_markup($reg_user->signature, 1);
        $node->content['signature'] = array(
         "#markup"=> '<div class="user-signature clearfix">'.$signature.'</div>',
         "#weight"=> 3
        );
      }
    }
  }
}

/**
 * Implementation of hook_field_widget_form_alter()
 */
function cfdp_uf_field_widget_form_alter(&$element, &$form_state, $context) {
  // We can restrict the condition even more by targetting the field_name
  // e.g. $element['#field_name'] == 'field_brevk_alder
  if (isset($context['field']['settings']['allowed_values'][0]['vocabulary']) && 
  $context['field']['settings']['allowed_values'][0]['vocabulary'] == 'alder') {
    if ($element['#bundle'] !== 'comment_node_brevkasse' && $element['#bundle'] !== 'brevkasse') {
      $element['#options'] = array_filter($element['#options'], '_filter_max_age');
    }
  }
}

/**
 * Custom function for filtering out ages from an array.
 */
function _filter_max_age($age_term, $max_age = 23) {
  return (int)$age_term > $max_age ? FALSE : TRUE;
}

/**
 * Helper function for checking if a node has a certain
 *
 * field_base_category term id
 *
 */
function cfdp_uf_check_node_term_id($node_type, $req_tid) {
  $node=menu_get_object();
  if (!(isset($node))
    || !(isset($node->field_base_category['und']))) {
      return false;
  }
  $type=$node->type;
  $term_id=$node->field_base_category['und'][0]['target_id'];
  if ($type == $node_type && $term_id == $req_tid) {
    return true;
  }
}

/**
 * Implements hook_mail_alter().
 */
function cfdp_uf_mail_alter(&$message)
{
  if(variable_get('enable_mailcatcher_hack', false)) {
    if(is_array($message['body'])) {
      foreach ($message['body'] as $key => $value) {
        $message['body'][$key] = base64_encode($message['body'][$key]);
      }
    } else {
      $message['body'] = base64_encode($message['body']);
    }
  }
}
